<?php
/**
 * Showcase
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Server\Model
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketplace
 *
 * API Cloud Loyalty LTM - Webpremios
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Server\Model;

use \ArrayAccess;
use Swagger\Server\Model\Brand;
use Swagger\Server\Model\Product;
use Swagger\Server\Model\Vendor;
use Swagger\Server\Model\FilterCategory;

/**
 * Class representing the Showcase model.
 *
 * @package Swagger\Server\Model
 * @author  Swagger Codegen team
 */
class Showcase implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $_name = 'showcase';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var array[]
      */
    protected static $_attributes = [
        'lower_price' => ['lowerPrice', 'float', 'decimal', 'setLowerPrice', 'getLowerPrice'],
        'higher_price' => ['higherPrice', 'float', 'decimal', 'setHigherPrice', 'getHigherPrice'],
        'products' => ['products', 'Swagger\Server\Model\Product[]', null, 'setProducts', 'getProducts'],
        'vendors' => ['vendors', 'Swagger\Server\Model\Vendor[]', null, 'setVendors', 'getVendors'],
        'categories' => ['categories', 'Swagger\Server\Model\FilterCategory[]', null, 'setCategories', 'getCategories'],
        'brands' => ['brands', 'Swagger\Server\Model\Brand[]', null, 'setBrands', 'getBrands'],
    ];
    

    
    /**
     * Menor preço de produto da vitrine
     *
     * @var float|null
     */
    protected $lower_price;

    /**
     * Maior preço de produto da vitrine
     *
     * @var float|null
     */
    protected $higher_price;

    /**     * @var Product[]|null
     */
    protected $products;

    /**     * @var Vendor[]|null
     */
    protected $vendors;

    /**     * @var FilterCategory[]|null
     */
    protected $categories;

    /**     * @var Brand[]|null
     */
    protected $brands;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->lower_price = isset($data['lower_price']) ? $data['lower_price'] : null;
        $this->higher_price = isset($data['higher_price']) ? $data['higher_price'] : null;
        $this->products = isset($data['products']) ? $data['products'] : null;
        $this->vendors = isset($data['vendors']) ? $data['vendors'] : null;
        $this->categories = isset($data['categories']) ? $data['categories'] : null;
        $this->brands = isset($data['brands']) ? $data['brands'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function modelName() {
        return self::$_name;
    }

    /**
     * Array of property to mappings.
     *
     * @return array[]
     */
    public function modelAttributes() {
        
        return self::$_attributes;
    }

    /**
     * Validate all the properties in the model
     *
     * Return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function isValid()
    {
        return true;
    }


    /**
     * Gets lower_price.
     *
     * @return float|null
     */
    public function getLowerPrice()
    {
        return $this->lower_price;
    }

    /**
     * Sets lower_price.
     *
     * @param float|null $lower_price  Menor preço de produto da vitrine
     *
     * @return $this
     */
    public function setLowerPrice($lower_price = null)
    {
        $this->lower_price = $lower_price;

        return $this;
    }

    /**
     * Gets higher_price.
     *
     * @return float|null
     */
    public function getHigherPrice()
    {
        return $this->higher_price;
    }

    /**
     * Sets higher_price.
     *
     * @param float|null $higher_price  Maior preço de produto da vitrine
     *
     * @return $this
     */
    public function setHigherPrice($higher_price = null)
    {
        $this->higher_price = $higher_price;

        return $this;
    }

    /**
     * Gets products.
     *
     * @return Product[]|null
     */
    public function getProducts()
    {
        return $this->products;
    }

    /**
     * Sets products.
     *
     * @param Product[]|null $products
     *
     * @return $this
     */
    public function setProducts(array $products = null)
    {
        $this->products = $products;

        return $this;
    }

    /**
     * Gets vendors.
     *
     * @return Vendor[]|null
     */
    public function getVendors()
    {
        return $this->vendors;
    }

    /**
     * Sets vendors.
     *
     * @param Vendor[]|null $vendors
     *
     * @return $this
     */
    public function setVendors(array $vendors = null)
    {
        $this->vendors = $vendors;

        return $this;
    }

    /**
     * Gets categories.
     *
     * @return FilterCategory[]|null
     */
    public function getCategories()
    {
        return $this->categories;
    }

    /**
     * Sets categories.
     *
     * @param FilterCategory[]|null $categories
     *
     * @return $this
     */
    public function setCategories(array $categories = null)
    {
        $this->categories = $categories;

        return $this;
    }

    /**
     * Gets brands.
     *
     * @return Brand[]|null
     */
    public function getBrands()
    {
        return $this->brands;
    }

    /**
     * Sets brands.
     *
     * @param Brand[]|null $brands
     *
     * @return $this
     */
    public function setBrands(array $brands = null)
    {
        $this->brands = $brands;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->$offset) ? $this->$offset : null;
    }

    /**
     * Sets value based on offset.
     * @param  string  $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        $this->$offset = null;
    }
}


