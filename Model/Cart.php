<?php
/**
 * Cart
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Server\Model
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketplace
 *
 * API Cloud Loyalty LTM - Webpremios
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Server\Model;

use \ArrayAccess;
use Swagger\Server\Model\CartItem;
use Swagger\Server\Model\CartShippingCustomer;
use Swagger\Server\Model\Address;

/**
 * Class representing the Cart model.
 *
 * @package Swagger\Server\Model
 * @author  Swagger Codegen team
 */
class Cart implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $_name = 'cart';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var array[]
      */
    protected static $_attributes = [
        'price' => ['price', 'float', 'decimal', 'setPrice', 'getPrice'],
        'items' => ['items', 'Swagger\Server\Model\CartItem[]', null, 'setItems', 'getItems'],
        'customer' => ['customer', 'Swagger\Server\Model\CartShippingCustomer', null, 'setCustomer', 'getCustomer'],
        'shipping' => ['shipping', 'Swagger\Server\Model\Address', null, 'setShipping', 'getShipping'],
    ];
    

    
    /**
     * Total do carrinho em pontos
     *
     * @var float|null
     */
    protected $price;

    /**     * @var CartItem[]|null
     */
    protected $items;

    /**     * @var CartShippingCustomer|null
     */
    protected $customer;

    /**     * @var Address|null
     */
    protected $shipping;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->price = isset($data['price']) ? $data['price'] : null;
        $this->items = isset($data['items']) ? $data['items'] : null;
        $this->customer = isset($data['customer']) ? $data['customer'] : null;
        $this->shipping = isset($data['shipping']) ? $data['shipping'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function modelName() {
        return self::$_name;
    }

    /**
     * Array of property to mappings.
     *
     * @return array[]
     */
    public function modelAttributes() {
        
        return self::$_attributes;
    }

    /**
     * Validate all the properties in the model
     *
     * Return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function isValid()
    {
        return true;
    }


    /**
     * Gets price.
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->price;
    }

    /**
     * Sets price.
     *
     * @param float|null $price  Total do carrinho em pontos
     *
     * @return $this
     */
    public function setPrice($price = null)
    {
        $this->price = $price;

        return $this;
    }

    /**
     * Gets items.
     *
     * @return CartItem[]|null
     */
    public function getItems()
    {
        return $this->items;
    }

    /**
     * Sets items.
     *
     * @param CartItem[]|null $items
     *
     * @return $this
     */
    public function setItems(array $items = null)
    {
        $this->items = $items;

        return $this;
    }

    /**
     * Gets customer.
     *
     * @return CartShippingCustomer|null
     */
    public function getCustomer()
    {
        return $this->customer;
    }

    /**
     * Sets customer.
     *
     * @param CartShippingCustomer|null $customer
     *
     * @return $this
     */
    public function setCustomer(CartShippingCustomer $customer = null)
    {
        $this->customer = $customer;

        return $this;
    }

    /**
     * Gets shipping.
     *
     * @return Address|null
     */
    public function getShipping()
    {
        return $this->shipping;
    }

    /**
     * Sets shipping.
     *
     * @param Address|null $shipping
     *
     * @return $this
     */
    public function setShipping(Address $shipping = null)
    {
        $this->shipping = $shipping;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->$offset) ? $this->$offset : null;
    }

    /**
     * Sets value based on offset.
     * @param  string  $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        $this->$offset = null;
    }
}


