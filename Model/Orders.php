<?php
/**
 * Orders
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Server\Model
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketplace
 *
 * API Cloud Loyalty LTM - Webpremios
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Server\Model;

use \ArrayAccess;
use Swagger\Server\Model\Items;
use Swagger\Server\Model\VendorOrders;

/**
 * Class representing the Orders model.
 *
 * 
 *
 * @package Swagger\Server\Model
 * @author  Swagger Codegen team
 */
class Orders implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $_name = 'orders';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var array[]
      */
    protected static $_attributes = [
        'id' => ['id', 'string', null, 'setId', 'getId'],
        'vendor_order_id' => ['vendorOrderId', 'string', null, 'setVendorOrderId', 'getVendorOrderId'],
        'status' => ['status', 'string', null, 'setStatus', 'getStatus'],
        'value_points' => ['valuePoints', 'float', 'decimal', 'setValuePoints', 'getValuePoints'],
        'products_value_points' => ['productsValuePoints', 'float', 'decimal', 'setProductsValuePoints', 'getProductsValuePoints'],
        'shipping_value_points' => ['shippingValuePoints', 'float', 'decimal', 'setShippingValuePoints', 'getShippingValuePoints'],
        'items' => ['items', 'Swagger\Server\Model\Items[]', null, 'setItems', 'getItems'],
        'vendor' => ['vendor', 'Swagger\Server\Model\VendorOrders[]', null, 'setVendor', 'getVendor'],
    ];
    

    /**
     * Allowed values of status
     */
    const STATUS_APPROVED = 'APPROVED';
    const STATUS_LOCKED = 'LOCKED';
    const STATUS_CANCELED = 'CANCELED';
    const STATUS_PENDING = 'PENDING';
    const STATUS_DELIVERED = 'DELIVERED';
    const STATUS_SENT = 'SENT';
    const STATUS_PARTIALCANCELED = 'PARTIALCANCELED';
    const STATUS_UNCONFIRMEDPAYMENT = 'UNCONFIRMEDPAYMENT';
    const STATUS_AUTHENTICATIONREQUIRED = 'AUTHENTICATIONREQUIRED';
    const STATUS_AUTHENTICATIONDENIED = 'AUTHENTICATIONDENIED';
    const STATUS_DENIEDSUPPLIER = 'DENIEDSUPPLIER';
    const STATUS_CONFIRMED = 'CONFIRMED';
    const STATUS_NOTCOMPLETED = 'NOTCOMPLETED';
    const STATUS_PAYMENTREVERSED = 'PAYMENTREVERSED';
    const STATUS_DENIEDLTMANTIFRAUD = 'DENIEDLTMANTIFRAUD';
    const STATUS_CANCEL = 'CANCEL';

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_APPROVED,
            self::STATUS_LOCKED,
            self::STATUS_CANCELED,
            self::STATUS_PENDING,
            self::STATUS_DELIVERED,
            self::STATUS_SENT,
            self::STATUS_PARTIALCANCELED,
            self::STATUS_UNCONFIRMEDPAYMENT,
            self::STATUS_AUTHENTICATIONREQUIRED,
            self::STATUS_AUTHENTICATIONDENIED,
            self::STATUS_DENIEDSUPPLIER,
            self::STATUS_CONFIRMED,
            self::STATUS_NOTCOMPLETED,
            self::STATUS_PAYMENTREVERSED,
            self::STATUS_DENIEDLTMANTIFRAUD,
            self::STATUS_CANCEL,
        ];
    }
    
    /**
     * Identificador do pedido
     *
     * @var string|null
     */
    protected $id;

    /**
     * Identificador do pedido no vendor
     *
     * @var string|null
     */
    protected $vendor_order_id;

    /**
     * Status do pedido
     *
     * @var string|null
     */
    protected $status;

    /**
     * Valor total do pedido, em pontos
     *
     * @var float|null
     */
    protected $value_points;

    /**
     * Valor total dos produtos, em pontos
     *
     * @var float|null
     */
    protected $products_value_points;

    /**
     * Valor total do frete do pedido, em pontos
     *
     * @var float|null
     */
    protected $shipping_value_points;

    /**     * @var Items[]|null
     */
    protected $items;

    /**     * @var VendorOrders[]|null
     */
    protected $vendor;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->id = isset($data['id']) ? $data['id'] : null;
        $this->vendor_order_id = isset($data['vendor_order_id']) ? $data['vendor_order_id'] : null;
        $this->status = isset($data['status']) ? $data['status'] : null;
        $this->value_points = isset($data['value_points']) ? $data['value_points'] : null;
        $this->products_value_points = isset($data['products_value_points']) ? $data['products_value_points'] : null;
        $this->shipping_value_points = isset($data['shipping_value_points']) ? $data['shipping_value_points'] : null;
        $this->items = isset($data['items']) ? $data['items'] : null;
        $this->vendor = isset($data['vendor']) ? $data['vendor'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($this->status, $allowedValues, true)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalid_properties;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function modelName() {
        return self::$_name;
    }

    /**
     * Array of property to mappings.
     *
     * @return array[]
     */
    public function modelAttributes() {
        
        return self::$_attributes;
    }

    /**
     * Validate all the properties in the model
     *
     * Return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function isValid()
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($this->status, $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id.
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Sets id.
     *
     * @param string|null $id  Identificador do pedido
     *
     * @return $this
     */
    public function setId($id = null)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Gets vendor_order_id.
     *
     * @return string|null
     */
    public function getVendorOrderId()
    {
        return $this->vendor_order_id;
    }

    /**
     * Sets vendor_order_id.
     *
     * @param string|null $vendor_order_id  Identificador do pedido no vendor
     *
     * @return $this
     */
    public function setVendorOrderId($vendor_order_id = null)
    {
        $this->vendor_order_id = $vendor_order_id;

        return $this;
    }

    /**
     * Gets status.
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Sets status.
     *
     * @param string|null $status  Status do pedido
     *
     * @return $this
     */
    public function setStatus($status = null)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if ($status !== null && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->status = $status;

        return $this;
    }

    /**
     * Gets value_points.
     *
     * @return float|null
     */
    public function getValuePoints()
    {
        return $this->value_points;
    }

    /**
     * Sets value_points.
     *
     * @param float|null $value_points  Valor total do pedido, em pontos
     *
     * @return $this
     */
    public function setValuePoints($value_points = null)
    {
        $this->value_points = $value_points;

        return $this;
    }

    /**
     * Gets products_value_points.
     *
     * @return float|null
     */
    public function getProductsValuePoints()
    {
        return $this->products_value_points;
    }

    /**
     * Sets products_value_points.
     *
     * @param float|null $products_value_points  Valor total dos produtos, em pontos
     *
     * @return $this
     */
    public function setProductsValuePoints($products_value_points = null)
    {
        $this->products_value_points = $products_value_points;

        return $this;
    }

    /**
     * Gets shipping_value_points.
     *
     * @return float|null
     */
    public function getShippingValuePoints()
    {
        return $this->shipping_value_points;
    }

    /**
     * Sets shipping_value_points.
     *
     * @param float|null $shipping_value_points  Valor total do frete do pedido, em pontos
     *
     * @return $this
     */
    public function setShippingValuePoints($shipping_value_points = null)
    {
        $this->shipping_value_points = $shipping_value_points;

        return $this;
    }

    /**
     * Gets items.
     *
     * @return Items[]|null
     */
    public function getItems()
    {
        return $this->items;
    }

    /**
     * Sets items.
     *
     * @param Items[]|null $items
     *
     * @return $this
     */
    public function setItems(array $items = null)
    {
        $this->items = $items;

        return $this;
    }

    /**
     * Gets vendor.
     *
     * @return VendorOrders[]|null
     */
    public function getVendor()
    {
        return $this->vendor;
    }

    /**
     * Sets vendor.
     *
     * @param VendorOrders[]|null $vendor
     *
     * @return $this
     */
    public function setVendor(array $vendor = null)
    {
        $this->vendor = $vendor;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->$offset) ? $this->$offset : null;
    }

    /**
     * Sets value based on offset.
     * @param  string  $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        $this->$offset = null;
    }
}


