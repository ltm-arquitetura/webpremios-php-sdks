<?php
/**
 * PurchasePost
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Server\Model
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketplace
 *
 * API Cloud Loyalty LTM - Webpremios
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Server\Model;

use \ArrayAccess;
use Swagger\Server\Model\CreditCardPayment;

/**
 * Class representing the PurchasePost model.
 *
 * 
 *
 * @package Swagger\Server\Model
 * @author  Swagger Codegen team
 */
class PurchasePost implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $_name = 'purchasePost';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var array[]
      */
    protected static $_attributes = [
        'cart_type' => ['cartType', 'string', null, 'setCartType', 'getCartType'],
        'channel_type' => ['channelType', 'string', null, 'setChannelType', 'getChannelType'],
        'credit_card_payment' => ['creditCardPayment', 'Swagger\Server\Model\CreditCardPayment', null, 'setCreditCardPayment', 'getCreditCardPayment'],
    ];
    

    /**
     * Allowed values of cart_type
     */
    const CART_TYPE_PHISICAL = 'PHISICAL';
    const CART_TYPE_VIRTUAL = 'VIRTUAL';

    /**
     * Allowed values of channel_type
     */
    const CHANNEL_TYPE_ONLINE = 'ONLINE';
    const CHANNEL_TYPE_POS = 'POS';
    const CHANNEL_TYPE_CALLCENTER = 'CALLCENTER';
    const CHANNEL_TYPE_STOREAUTHORIZE = 'STOREAUTHORIZE';
    const CHANNEL_TYPE_STOREONLINE = 'STOREONLINE';
    const CHANNEL_TYPE_MOBILE = 'MOBILE';
    const CHANNEL_TYPE_STOREOWN = 'STOREOWN';
    const CHANNEL_TYPE_RESALE = 'RESALE';
    const CHANNEL_TYPE_SELFSERVICE = 'SELFSERVICE';
    const CHANNEL_TYPE_SMSINTERACTIVE = 'SMSINTERACTIVE';
    const CHANNEL_TYPE_TELESALES = 'TELESALES';
    const CHANNEL_TYPE_URA = 'URA';
    const CHANNEL_TYPE_STOREBENEFIT = 'STOREBENEFIT';
    const CHANNEL_TYPE_NETBANKING = 'NETBANKING';
    const CHANNEL_TYPE_OFFLINE = 'OFFLINE';

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCartTypeAllowableValues()
    {
        return [
            self::CART_TYPE_PHISICAL,
            self::CART_TYPE_VIRTUAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getChannelTypeAllowableValues()
    {
        return [
            self::CHANNEL_TYPE_ONLINE,
            self::CHANNEL_TYPE_POS,
            self::CHANNEL_TYPE_CALLCENTER,
            self::CHANNEL_TYPE_STOREAUTHORIZE,
            self::CHANNEL_TYPE_STOREONLINE,
            self::CHANNEL_TYPE_MOBILE,
            self::CHANNEL_TYPE_STOREOWN,
            self::CHANNEL_TYPE_RESALE,
            self::CHANNEL_TYPE_SELFSERVICE,
            self::CHANNEL_TYPE_SMSINTERACTIVE,
            self::CHANNEL_TYPE_TELESALES,
            self::CHANNEL_TYPE_URA,
            self::CHANNEL_TYPE_STOREBENEFIT,
            self::CHANNEL_TYPE_NETBANKING,
            self::CHANNEL_TYPE_OFFLINE,
        ];
    }
    
    /**
     * Tipo do carrinho
     *
     * @var string
     */
    protected $cart_type;

    /**
     * Canal que o pedido foi realizado
     *
     * @var string
     */
    protected $channel_type;

    /**     * @var CreditCardPayment|null
     */
    protected $credit_card_payment;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->cart_type = isset($data['cart_type']) ? $data['cart_type'] : null;
        $this->channel_type = isset($data['channel_type']) ? $data['channel_type'] : null;
        $this->credit_card_payment = isset($data['credit_card_payment']) ? $data['credit_card_payment'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->cart_type === null) {
            $invalid_properties[] = "'cart_type' can't be null";
        }
        $allowedValues = $this->getCartTypeAllowableValues();
        if (!in_array($this->cart_type, $allowedValues, true)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'cart_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->channel_type === null) {
            $invalid_properties[] = "'channel_type' can't be null";
        }
        $allowedValues = $this->getChannelTypeAllowableValues();
        if (!in_array($this->channel_type, $allowedValues, true)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'channel_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalid_properties;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function modelName() {
        return self::$_name;
    }

    /**
     * Array of property to mappings.
     *
     * @return array[]
     */
    public function modelAttributes() {
        
        return self::$_attributes;
    }

    /**
     * Validate all the properties in the model
     *
     * Return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function isValid()
    {
        if ($this->cart_type === null) {
            return false;
        }
        $allowedValues = $this->getCartTypeAllowableValues();
        if (!in_array($this->cart_type, $allowedValues)) {
            return false;
        }
        if ($this->channel_type === null) {
            return false;
        }
        $allowedValues = $this->getChannelTypeAllowableValues();
        if (!in_array($this->channel_type, $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets cart_type.
     *
     * @return string
     */
    public function getCartType()
    {
        return $this->cart_type;
    }

    /**
     * Sets cart_type.
     *
     * @param string $cart_type  Tipo do carrinho
     *
     * @return $this
     */
    public function setCartType($cart_type)
    {
        $allowedValues = $this->getCartTypeAllowableValues();
        if (!in_array($cart_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'cart_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->cart_type = $cart_type;

        return $this;
    }

    /**
     * Gets channel_type.
     *
     * @return string
     */
    public function getChannelType()
    {
        return $this->channel_type;
    }

    /**
     * Sets channel_type.
     *
     * @param string $channel_type  Canal que o pedido foi realizado
     *
     * @return $this
     */
    public function setChannelType($channel_type)
    {
        $allowedValues = $this->getChannelTypeAllowableValues();
        if (!in_array($channel_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'channel_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->channel_type = $channel_type;

        return $this;
    }

    /**
     * Gets credit_card_payment.
     *
     * @return CreditCardPayment|null
     */
    public function getCreditCardPayment()
    {
        return $this->credit_card_payment;
    }

    /**
     * Sets credit_card_payment.
     *
     * @param CreditCardPayment|null $credit_card_payment
     *
     * @return $this
     */
    public function setCreditCardPayment(CreditCardPayment $credit_card_payment = null)
    {
        $this->credit_card_payment = $credit_card_payment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->$offset) ? $this->$offset : null;
    }

    /**
     * Sets value based on offset.
     * @param  string  $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        $this->$offset = null;
    }
}


