<?php
/**
 * ParticipantUpt
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Server\Model
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketplace
 *
 * API Cloud Loyalty LTM - Webpremios
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Server\Model;

use \ArrayAccess;
use Swagger\Server\Model\Email;
use Swagger\Server\Model\Phone;
use Swagger\Server\Model\AddressReq;

/**
 * Class representing the ParticipantUpt model.
 *
 * @package Swagger\Server\Model
 * @author  Swagger Codegen team
 */
class ParticipantUpt implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $_name = 'participantUpt';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var array[]
      */
    protected static $_attributes = [
        'client_id' => ['clientId', 'string', null, 'setClientId', 'getClientId'],
        'catalog_id' => ['catalogId', 'string', null, 'setCatalogId', 'getCatalogId'],
        'profile_id' => ['profileId', 'string', null, 'setProfileId', 'getProfileId'],
        'name' => ['name', 'string', null, 'setName', 'getName'],
        'document_number' => ['documentNumber', 'string', null, 'setDocumentNumber', 'getDocumentNumber'],
        'rg' => ['rg', 'string', null, 'setRg', 'getRg'],
        'status' => ['status', 'string', null, 'setStatus', 'getStatus'],
        'password' => ['password', 'string', null, 'setPassword', 'getPassword'],
        'marital_status' => ['maritalStatus', 'string', null, 'setMaritalStatus', 'getMaritalStatus'],
        'person_type' => ['personType', 'string', null, 'setPersonType', 'getPersonType'],
        'gender_type' => ['genderType', 'string', null, 'setGenderType', 'getGenderType'],
        'birth_date' => ['birthDate', '\DateTime', 'date', 'setBirthDate', 'getBirthDate'],
        'emails' => ['emails', 'Swagger\Server\Model\Email[]', null, 'setEmails', 'getEmails'],
        'phones' => ['phones', 'Swagger\Server\Model\Phone[]', null, 'setPhones', 'getPhones'],
        'address' => ['address', 'Swagger\Server\Model\AddressReq', null, 'setAddress', 'getAddress'],
    ];
    

    /**
     * Allowed values of status
     */
    const STATUS_ACTIVE = 'ACTIVE';
    const STATUS_SIGNPENDANT = 'SIGNPENDANT';
    const STATUS_INACTIVE = 'INACTIVE';
    const STATUS_WAIT = 'WAIT';
    const STATUS_PENDINGVALIDATION = 'PENDINGVALIDATION';
    const STATUS_PENDINGREGISTRATION = 'PENDINGREGISTRATION';
    const STATUS_PENDINGPAYMENT = 'PENDINGPAYMENT';
    const STATUS_CANCELLEDCARD = 'CANCELLEDCARD';
    const STATUS_STANDBYWITHOUTPRIZE = 'STANDBYWITHOUTPRIZE';
    const STATUS_PASSWORDSIGNPENDANT = 'PASSWORDSIGNPENDANT';

    /**
     * Allowed values of marital_status
     */
    const MARITAL_STATUS_MARRIED = 'MARRIED';
    const MARITAL_STATUS_DIVORCED = 'DIVORCED';
    const MARITAL_STATUS_SINGLE = 'SINGLE';
    const MARITAL_STATUS_WIDOWER = 'WIDOWER';
    const MARITAL_STATUS_SEPARATED = 'SEPARATED';
    const MARITAL_STATUS_UNINFORMED = 'UNINFORMED';

    /**
     * Allowed values of person_type
     */
    const PERSON_TYPE_INDIVIDUAL = 'INDIVIDUAL';
    const PERSON_TYPE_COMPANY = 'COMPANY';

    /**
     * Allowed values of gender_type
     */
    const GENDER_TYPE_MALE = 'MALE';
    const GENDER_TYPE_FEMALE = 'FEMALE';
    const GENDER_TYPE_UNINFORMED = 'UNINFORMED';

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACTIVE,
            self::STATUS_SIGNPENDANT,
            self::STATUS_INACTIVE,
            self::STATUS_WAIT,
            self::STATUS_PENDINGVALIDATION,
            self::STATUS_PENDINGREGISTRATION,
            self::STATUS_PENDINGPAYMENT,
            self::STATUS_CANCELLEDCARD,
            self::STATUS_STANDBYWITHOUTPRIZE,
            self::STATUS_PASSWORDSIGNPENDANT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getMaritalStatusAllowableValues()
    {
        return [
            self::MARITAL_STATUS_MARRIED,
            self::MARITAL_STATUS_DIVORCED,
            self::MARITAL_STATUS_SINGLE,
            self::MARITAL_STATUS_WIDOWER,
            self::MARITAL_STATUS_SEPARATED,
            self::MARITAL_STATUS_UNINFORMED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPersonTypeAllowableValues()
    {
        return [
            self::PERSON_TYPE_INDIVIDUAL,
            self::PERSON_TYPE_COMPANY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getGenderTypeAllowableValues()
    {
        return [
            self::GENDER_TYPE_MALE,
            self::GENDER_TYPE_FEMALE,
            self::GENDER_TYPE_UNINFORMED,
        ];
    }
    
    /**
     * Identificador do Cliente
     *
     * @var string
     */
    protected $client_id;

    /**
     * Identificador do Catalogo
     *
     * @var string
     */
    protected $catalog_id;

    /**
     * Identificador do Perfil
     *
     * @var string
     */
    protected $profile_id;

    /**
     * Nome do participante
     *
     * @var string|null
     */
    protected $name;

    /**
     * Documento ex: CPF, CNPJ
     *
     * @var string|null
     */
    protected $document_number;

    /**
     * RG do participante
     *
     * @var string|null
     */
    protected $rg;

    /**
     * Status do participante
     *
     * @var string
     */
    protected $status;

    /**
     * Senha do participante
     *
     * @var string|null
     */
    protected $password;

    /**
     * Estado civil
     *
     * @var string|null
     */
    protected $marital_status;

    /**
     * Tipo de pessoa
     *
     * @var string
     */
    protected $person_type;

    /**
     * GÃªnero
     *
     * @var string|null
     */
    protected $gender_type;

    /**
     * Data de nascimento
     *
     * @var \DateTime|null
     */
    protected $birth_date;

    /**
     * E-mails
     *
     * @var Email[]|null
     */
    protected $emails;

    /**
     * Telefones
     *
     * @var Phone[]|null
     */
    protected $phones;

    /**     * @var AddressReq|null
     */
    protected $address;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->client_id = isset($data['client_id']) ? $data['client_id'] : null;
        $this->catalog_id = isset($data['catalog_id']) ? $data['catalog_id'] : null;
        $this->profile_id = isset($data['profile_id']) ? $data['profile_id'] : null;
        $this->name = isset($data['name']) ? $data['name'] : null;
        $this->document_number = isset($data['document_number']) ? $data['document_number'] : null;
        $this->rg = isset($data['rg']) ? $data['rg'] : null;
        $this->status = isset($data['status']) ? $data['status'] : null;
        $this->password = isset($data['password']) ? $data['password'] : null;
        $this->marital_status = isset($data['marital_status']) ? $data['marital_status'] : null;
        $this->person_type = isset($data['person_type']) ? $data['person_type'] : null;
        $this->gender_type = isset($data['gender_type']) ? $data['gender_type'] : null;
        $this->birth_date = isset($data['birth_date']) ? $data['birth_date'] : null;
        $this->emails = isset($data['emails']) ? $data['emails'] : null;
        $this->phones = isset($data['phones']) ? $data['phones'] : null;
        $this->address = isset($data['address']) ? $data['address'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->client_id === null) {
            $invalid_properties[] = "'client_id' can't be null";
        }
        if ($this->catalog_id === null) {
            $invalid_properties[] = "'catalog_id' can't be null";
        }
        if ($this->profile_id === null) {
            $invalid_properties[] = "'profile_id' can't be null";
        }
        if ($this->status === null) {
            $invalid_properties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($this->status, $allowedValues, true)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMaritalStatusAllowableValues();
        if (!in_array($this->marital_status, $allowedValues, true)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'marital_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->person_type === null) {
            $invalid_properties[] = "'person_type' can't be null";
        }
        $allowedValues = $this->getPersonTypeAllowableValues();
        if (!in_array($this->person_type, $allowedValues, true)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'person_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGenderTypeAllowableValues();
        if (!in_array($this->gender_type, $allowedValues, true)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'gender_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalid_properties;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function modelName() {
        return self::$_name;
    }

    /**
     * Array of property to mappings.
     *
     * @return array[]
     */
    public function modelAttributes() {
        
        return self::$_attributes;
    }

    /**
     * Validate all the properties in the model
     *
     * Return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function isValid()
    {
        if ($this->client_id === null) {
            return false;
        }
        if ($this->catalog_id === null) {
            return false;
        }
        if ($this->profile_id === null) {
            return false;
        }
        if ($this->status === null) {
            return false;
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($this->status, $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getMaritalStatusAllowableValues();
        if (!in_array($this->marital_status, $allowedValues)) {
            return false;
        }
        if ($this->person_type === null) {
            return false;
        }
        $allowedValues = $this->getPersonTypeAllowableValues();
        if (!in_array($this->person_type, $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getGenderTypeAllowableValues();
        if (!in_array($this->gender_type, $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets client_id.
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->client_id;
    }

    /**
     * Sets client_id.
     *
     * @param string $client_id  Identificador do Cliente
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->client_id = $client_id;

        return $this;
    }

    /**
     * Gets catalog_id.
     *
     * @return string
     */
    public function getCatalogId()
    {
        return $this->catalog_id;
    }

    /**
     * Sets catalog_id.
     *
     * @param string $catalog_id  Identificador do Catalogo
     *
     * @return $this
     */
    public function setCatalogId($catalog_id)
    {
        $this->catalog_id = $catalog_id;

        return $this;
    }

    /**
     * Gets profile_id.
     *
     * @return string
     */
    public function getProfileId()
    {
        return $this->profile_id;
    }

    /**
     * Sets profile_id.
     *
     * @param string $profile_id  Identificador do Perfil
     *
     * @return $this
     */
    public function setProfileId($profile_id)
    {
        $this->profile_id = $profile_id;

        return $this;
    }

    /**
     * Gets name.
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Sets name.
     *
     * @param string|null $name  Nome do participante
     *
     * @return $this
     */
    public function setName($name = null)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Gets document_number.
     *
     * @return string|null
     */
    public function getDocumentNumber()
    {
        return $this->document_number;
    }

    /**
     * Sets document_number.
     *
     * @param string|null $document_number  Documento ex: CPF, CNPJ
     *
     * @return $this
     */
    public function setDocumentNumber($document_number = null)
    {
        $this->document_number = $document_number;

        return $this;
    }

    /**
     * Gets rg.
     *
     * @return string|null
     */
    public function getRg()
    {
        return $this->rg;
    }

    /**
     * Sets rg.
     *
     * @param string|null $rg  RG do participante
     *
     * @return $this
     */
    public function setRg($rg = null)
    {
        $this->rg = $rg;

        return $this;
    }

    /**
     * Gets status.
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Sets status.
     *
     * @param string $status  Status do participante
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->status = $status;

        return $this;
    }

    /**
     * Gets password.
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->password;
    }

    /**
     * Sets password.
     *
     * @param string|null $password  Senha do participante
     *
     * @return $this
     */
    public function setPassword($password = null)
    {
        $this->password = $password;

        return $this;
    }

    /**
     * Gets marital_status.
     *
     * @return string|null
     */
    public function getMaritalStatus()
    {
        return $this->marital_status;
    }

    /**
     * Sets marital_status.
     *
     * @param string|null $marital_status  Estado civil
     *
     * @return $this
     */
    public function setMaritalStatus($marital_status = null)
    {
        $allowedValues = $this->getMaritalStatusAllowableValues();
        if ($marital_status !== null && !in_array($marital_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'marital_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->marital_status = $marital_status;

        return $this;
    }

    /**
     * Gets person_type.
     *
     * @return string
     */
    public function getPersonType()
    {
        return $this->person_type;
    }

    /**
     * Sets person_type.
     *
     * @param string $person_type  Tipo de pessoa
     *
     * @return $this
     */
    public function setPersonType($person_type)
    {
        $allowedValues = $this->getPersonTypeAllowableValues();
        if (!in_array($person_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'person_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->person_type = $person_type;

        return $this;
    }

    /**
     * Gets gender_type.
     *
     * @return string|null
     */
    public function getGenderType()
    {
        return $this->gender_type;
    }

    /**
     * Sets gender_type.
     *
     * @param string|null $gender_type  GÃªnero
     *
     * @return $this
     */
    public function setGenderType($gender_type = null)
    {
        $allowedValues = $this->getGenderTypeAllowableValues();
        if ($gender_type !== null && !in_array($gender_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'gender_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->gender_type = $gender_type;

        return $this;
    }

    /**
     * Gets birth_date.
     *
     * @return \DateTime|null
     */
    public function getBirthDate()
    {
        return $this->birth_date;
    }

    /**
     * Sets birth_date.
     *
     * @param \DateTime|null $birth_date  Data de nascimento
     *
     * @return $this
     */
    public function setBirthDate($birth_date = null)
    {
        $this->birth_date = $birth_date;

        return $this;
    }

    /**
     * Gets emails.
     *
     * @return Email[]|null
     */
    public function getEmails()
    {
        return $this->emails;
    }

    /**
     * Sets emails.
     *
     * @param Email[]|null $emails  E-mails
     *
     * @return $this
     */
    public function setEmails(array $emails = null)
    {
        $this->emails = $emails;

        return $this;
    }

    /**
     * Gets phones.
     *
     * @return Phone[]|null
     */
    public function getPhones()
    {
        return $this->phones;
    }

    /**
     * Sets phones.
     *
     * @param Phone[]|null $phones  Telefones
     *
     * @return $this
     */
    public function setPhones(array $phones = null)
    {
        $this->phones = $phones;

        return $this;
    }

    /**
     * Gets address.
     *
     * @return AddressReq|null
     */
    public function getAddress()
    {
        return $this->address;
    }

    /**
     * Sets address.
     *
     * @param AddressReq|null $address
     *
     * @return $this
     */
    public function setAddress(AddressReq $address = null)
    {
        $this->address = $address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->$offset) ? $this->$offset : null;
    }

    /**
     * Sets value based on offset.
     * @param  string  $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        $this->$offset = null;
    }
}


