<?php
/**
 * PurchaseAuthorize
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Server\Model
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketplace
 *
 * API Cloud Loyalty LTM - Webpremios
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Server\Model;

use \ArrayAccess;
use Swagger\Server\Model\PurchaseAuthCustomer;
use Swagger\Server\Model\PurchaseAuthItems;
use Swagger\Server\Model\Address;

/**
 * Class representing the PurchaseAuthorize model.
 *
 * 
 *
 * @package Swagger\Server\Model
 * @author  Swagger Codegen team
 */
class PurchaseAuthorize implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $_name = 'purchaseAuthorize';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var array[]
      */
    protected static $_attributes = [
        'channel_type' => ['channelType', 'string', null, 'setChannelType', 'getChannelType'],
        'vendor_order_id' => ['vendorOrderId', 'string', null, 'setVendorOrderId', 'getVendorOrderId'],
        'customer' => ['customer', 'Swagger\Server\Model\PurchaseAuthCustomer', null, 'setCustomer', 'getCustomer'],
        'shipping' => ['shipping', 'Swagger\Server\Model\Address', null, 'setShipping', 'getShipping'],
        'items' => ['items', 'Swagger\Server\Model\PurchaseAuthItems[]', null, 'setItems', 'getItems'],
    ];
    

    /**
     * Allowed values of channel_type
     */
    const CHANNEL_TYPE_ONLINE = 'ONLINE';
    const CHANNEL_TYPE_POS = 'POS';
    const CHANNEL_TYPE_CALLCENTER = 'CALLCENTER';
    const CHANNEL_TYPE_STOREAUTHORIZE = 'STOREAUTHORIZE';
    const CHANNEL_TYPE_STOREONLINE = 'STOREONLINE';
    const CHANNEL_TYPE_MOBILE = 'MOBILE';
    const CHANNEL_TYPE_STOREOWN = 'STOREOWN';
    const CHANNEL_TYPE_RESALE = 'RESALE';
    const CHANNEL_TYPE_SELFSERVICE = 'SELFSERVICE';
    const CHANNEL_TYPE_SMSINTERACTIVE = 'SMSINTERACTIVE';
    const CHANNEL_TYPE_TELESALES = 'TELESALES';
    const CHANNEL_TYPE_URA = 'URA';
    const CHANNEL_TYPE_STOREBENEFIT = 'STOREBENEFIT';
    const CHANNEL_TYPE_NETBANKING = 'NETBANKING';
    const CHANNEL_TYPE_OFFLINE = 'OFFLINE';

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getChannelTypeAllowableValues()
    {
        return [
            self::CHANNEL_TYPE_ONLINE,
            self::CHANNEL_TYPE_POS,
            self::CHANNEL_TYPE_CALLCENTER,
            self::CHANNEL_TYPE_STOREAUTHORIZE,
            self::CHANNEL_TYPE_STOREONLINE,
            self::CHANNEL_TYPE_MOBILE,
            self::CHANNEL_TYPE_STOREOWN,
            self::CHANNEL_TYPE_RESALE,
            self::CHANNEL_TYPE_SELFSERVICE,
            self::CHANNEL_TYPE_SMSINTERACTIVE,
            self::CHANNEL_TYPE_TELESALES,
            self::CHANNEL_TYPE_URA,
            self::CHANNEL_TYPE_STOREBENEFIT,
            self::CHANNEL_TYPE_NETBANKING,
            self::CHANNEL_TYPE_OFFLINE,
        ];
    }
    
    /**
     * Canal pelo qual o pedido está sendo fechado
     *
     * @var string|null
     */
    protected $channel_type;

    /**
     * Identificador do pedido no parceiro.
     *
     * @var string|null
     */
    protected $vendor_order_id;

    /**     * @var PurchaseAuthCustomer|null
     */
    protected $customer;

    /**     * @var Address|null
     */
    protected $shipping;

    /**
     * 
     *
     * @var PurchaseAuthItems[]|null
     */
    protected $items;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->channel_type = isset($data['channel_type']) ? $data['channel_type'] : null;
        $this->vendor_order_id = isset($data['vendor_order_id']) ? $data['vendor_order_id'] : null;
        $this->customer = isset($data['customer']) ? $data['customer'] : null;
        $this->shipping = isset($data['shipping']) ? $data['shipping'] : null;
        $this->items = isset($data['items']) ? $data['items'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowedValues = $this->getChannelTypeAllowableValues();
        if (!in_array($this->channel_type, $allowedValues, true)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'channel_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalid_properties;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function modelName() {
        return self::$_name;
    }

    /**
     * Array of property to mappings.
     *
     * @return array[]
     */
    public function modelAttributes() {
        
        return self::$_attributes;
    }

    /**
     * Validate all the properties in the model
     *
     * Return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function isValid()
    {
        $allowedValues = $this->getChannelTypeAllowableValues();
        if (!in_array($this->channel_type, $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets channel_type.
     *
     * @return string|null
     */
    public function getChannelType()
    {
        return $this->channel_type;
    }

    /**
     * Sets channel_type.
     *
     * @param string|null $channel_type  Canal pelo qual o pedido está sendo fechado
     *
     * @return $this
     */
    public function setChannelType($channel_type = null)
    {
        $allowedValues = $this->getChannelTypeAllowableValues();
        if ($channel_type !== null && !in_array($channel_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'channel_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->channel_type = $channel_type;

        return $this;
    }

    /**
     * Gets vendor_order_id.
     *
     * @return string|null
     */
    public function getVendorOrderId()
    {
        return $this->vendor_order_id;
    }

    /**
     * Sets vendor_order_id.
     *
     * @param string|null $vendor_order_id  Identificador do pedido no parceiro.
     *
     * @return $this
     */
    public function setVendorOrderId($vendor_order_id = null)
    {
        $this->vendor_order_id = $vendor_order_id;

        return $this;
    }

    /**
     * Gets customer.
     *
     * @return PurchaseAuthCustomer|null
     */
    public function getCustomer()
    {
        return $this->customer;
    }

    /**
     * Sets customer.
     *
     * @param PurchaseAuthCustomer|null $customer
     *
     * @return $this
     */
    public function setCustomer(PurchaseAuthCustomer $customer = null)
    {
        $this->customer = $customer;

        return $this;
    }

    /**
     * Gets shipping.
     *
     * @return Address|null
     */
    public function getShipping()
    {
        return $this->shipping;
    }

    /**
     * Sets shipping.
     *
     * @param Address|null $shipping
     *
     * @return $this
     */
    public function setShipping(Address $shipping = null)
    {
        $this->shipping = $shipping;

        return $this;
    }

    /**
     * Gets items.
     *
     * @return PurchaseAuthItems[]|null
     */
    public function getItems()
    {
        return $this->items;
    }

    /**
     * Sets items.
     *
     * @param PurchaseAuthItems[]|null $items  
     *
     * @return $this
     */
    public function setItems(array $items = null)
    {
        $this->items = $items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->$offset) ? $this->$offset : null;
    }

    /**
     * Sets value based on offset.
     * @param  string  $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        $this->$offset = null;
    }
}


