<?php
/**
 * PurchaseAuthCustomer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Server\Model
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketplace
 *
 * API Cloud Loyalty LTM - Webpremios
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Server\Model;

use \ArrayAccess;
use Swagger\Server\Model\Phone;

/**
 * Class representing the PurchaseAuthCustomer model.
 *
 * 
 *
 * @package Swagger\Server\Model
 * @author  Swagger Codegen team
 */
class PurchaseAuthCustomer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $_name = 'purchaseAuthCustomer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var array[]
      */
    protected static $_attributes = [
        'name' => ['name', 'string', null, 'setName', 'getName'],
        'document_number' => ['documentNumber', 'string', null, 'setDocumentNumber', 'getDocumentNumber'],
        'rg' => ['rg', 'string', null, 'setRg', 'getRg'],
        'email' => ['email', 'string', null, 'setEmail', 'getEmail'],
        'person_type' => ['personType', 'string', null, 'setPersonType', 'getPersonType'],
        'gender_type' => ['genderType', 'string', null, 'setGenderType', 'getGenderType'],
        'birth_date' => ['birthDate', '\DateTime', 'date', 'setBirthDate', 'getBirthDate'],
        'phones' => ['phones', 'Swagger\Server\Model\Phone[]', null, 'setPhones', 'getPhones'],
    ];
    

    /**
     * Allowed values of person_type
     */
    const PERSON_TYPE_INDIVIDUAL = 'INDIVIDUAL';
    const PERSON_TYPE_COMPANY = 'COMPANY';

    /**
     * Allowed values of gender_type
     */
    const GENDER_TYPE_MALE = 'MALE';
    const GENDER_TYPE_FEMALE = 'FEMALE';
    const GENDER_TYPE_UNINFORMED = 'UNINFORMED';

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPersonTypeAllowableValues()
    {
        return [
            self::PERSON_TYPE_INDIVIDUAL,
            self::PERSON_TYPE_COMPANY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getGenderTypeAllowableValues()
    {
        return [
            self::GENDER_TYPE_MALE,
            self::GENDER_TYPE_FEMALE,
            self::GENDER_TYPE_UNINFORMED,
        ];
    }
    
    /**
     * Nome do cliente
     *
     * @var string|null
     */
    protected $name;

    /**
     * Documento ex: CPF, CNPJ
     *
     * @var string|null
     */
    protected $document_number;

    /**
     * RG do cliente
     *
     * @var string|null
     */
    protected $rg;

    /**
     * E-mail
     *
     * @var string|null
     */
    protected $email;

    /**
     * Tipo de pessoa
     *
     * @var string|null
     */
    protected $person_type;

    /**
     * Gênero
     *
     * @var string|null
     */
    protected $gender_type;

    /**
     * Data de nascimento
     *
     * @var \DateTime|null
     */
    protected $birth_date;

    /**
     * Telefones
     *
     * @var Phone[]|null
     */
    protected $phones;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->name = isset($data['name']) ? $data['name'] : null;
        $this->document_number = isset($data['document_number']) ? $data['document_number'] : null;
        $this->rg = isset($data['rg']) ? $data['rg'] : null;
        $this->email = isset($data['email']) ? $data['email'] : null;
        $this->person_type = isset($data['person_type']) ? $data['person_type'] : null;
        $this->gender_type = isset($data['gender_type']) ? $data['gender_type'] : null;
        $this->birth_date = isset($data['birth_date']) ? $data['birth_date'] : null;
        $this->phones = isset($data['phones']) ? $data['phones'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowedValues = $this->getPersonTypeAllowableValues();
        if (!in_array($this->person_type, $allowedValues, true)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'person_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGenderTypeAllowableValues();
        if (!in_array($this->gender_type, $allowedValues, true)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'gender_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalid_properties;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function modelName() {
        return self::$_name;
    }

    /**
     * Array of property to mappings.
     *
     * @return array[]
     */
    public function modelAttributes() {
        
        return self::$_attributes;
    }

    /**
     * Validate all the properties in the model
     *
     * Return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function isValid()
    {
        $allowedValues = $this->getPersonTypeAllowableValues();
        if (!in_array($this->person_type, $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getGenderTypeAllowableValues();
        if (!in_array($this->gender_type, $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets name.
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Sets name.
     *
     * @param string|null $name  Nome do cliente
     *
     * @return $this
     */
    public function setName($name = null)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Gets document_number.
     *
     * @return string|null
     */
    public function getDocumentNumber()
    {
        return $this->document_number;
    }

    /**
     * Sets document_number.
     *
     * @param string|null $document_number  Documento ex: CPF, CNPJ
     *
     * @return $this
     */
    public function setDocumentNumber($document_number = null)
    {
        $this->document_number = $document_number;

        return $this;
    }

    /**
     * Gets rg.
     *
     * @return string|null
     */
    public function getRg()
    {
        return $this->rg;
    }

    /**
     * Sets rg.
     *
     * @param string|null $rg  RG do cliente
     *
     * @return $this
     */
    public function setRg($rg = null)
    {
        $this->rg = $rg;

        return $this;
    }

    /**
     * Gets email.
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Sets email.
     *
     * @param string|null $email  E-mail
     *
     * @return $this
     */
    public function setEmail($email = null)
    {
        $this->email = $email;

        return $this;
    }

    /**
     * Gets person_type.
     *
     * @return string|null
     */
    public function getPersonType()
    {
        return $this->person_type;
    }

    /**
     * Sets person_type.
     *
     * @param string|null $person_type  Tipo de pessoa
     *
     * @return $this
     */
    public function setPersonType($person_type = null)
    {
        $allowedValues = $this->getPersonTypeAllowableValues();
        if ($person_type !== null && !in_array($person_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'person_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->person_type = $person_type;

        return $this;
    }

    /**
     * Gets gender_type.
     *
     * @return string|null
     */
    public function getGenderType()
    {
        return $this->gender_type;
    }

    /**
     * Sets gender_type.
     *
     * @param string|null $gender_type  Gênero
     *
     * @return $this
     */
    public function setGenderType($gender_type = null)
    {
        $allowedValues = $this->getGenderTypeAllowableValues();
        if ($gender_type !== null && !in_array($gender_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'gender_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->gender_type = $gender_type;

        return $this;
    }

    /**
     * Gets birth_date.
     *
     * @return \DateTime|null
     */
    public function getBirthDate()
    {
        return $this->birth_date;
    }

    /**
     * Sets birth_date.
     *
     * @param \DateTime|null $birth_date  Data de nascimento
     *
     * @return $this
     */
    public function setBirthDate($birth_date = null)
    {
        $this->birth_date = $birth_date;

        return $this;
    }

    /**
     * Gets phones.
     *
     * @return Phone[]|null
     */
    public function getPhones()
    {
        return $this->phones;
    }

    /**
     * Sets phones.
     *
     * @param Phone[]|null $phones  Telefones
     *
     * @return $this
     */
    public function setPhones(array $phones = null)
    {
        $this->phones = $phones;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->$offset) ? $this->$offset : null;
    }

    /**
     * Sets value based on offset.
     * @param  string  $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        $this->$offset = null;
    }
}


