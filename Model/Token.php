<?php
/**
 * Token
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Server\Model
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketplace
 *
 * API Cloud Loyalty LTM - Webpremios
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Server\Model;

use \ArrayAccess;

/**
 * Class representing the Token model.
 *
 * @package Swagger\Server\Model
 * @author  Swagger Codegen team
 */
class Token implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $_name = 'token';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var array[]
      */
    protected static $_attributes = [
        'access_token' => ['access_token', 'string', null, 'setAccessToken', 'getAccessToken'],
        'refresh_token' => ['refresh_token', 'string', null, 'setRefreshToken', 'getRefreshToken'],
        'token_type' => ['token_type', 'string', null, 'setTokenType', 'getTokenType'],
        'expires_in' => ['expires_in', 'int', 'int64', 'setExpiresIn', 'getExpiresIn'],
    ];
    

    
    /**
     * Token de acesso.
     *
     * @var string
     */
    protected $access_token;

    /**
     * Token para renovação.
     *
     * @var string
     */
    protected $refresh_token;

    /**
     * Tipo do token.
     *
     * @var string
     */
    protected $token_type;

    /**
     * Valor em segundos do vencimento do token.
     *
     * @var int
     */
    protected $expires_in;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->access_token = isset($data['access_token']) ? $data['access_token'] : null;
        $this->refresh_token = isset($data['refresh_token']) ? $data['refresh_token'] : null;
        $this->token_type = isset($data['token_type']) ? $data['token_type'] : null;
        $this->expires_in = isset($data['expires_in']) ? $data['expires_in'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->access_token === null) {
            $invalid_properties[] = "'access_token' can't be null";
        }
        if ($this->refresh_token === null) {
            $invalid_properties[] = "'refresh_token' can't be null";
        }
        if ($this->token_type === null) {
            $invalid_properties[] = "'token_type' can't be null";
        }
        if ($this->expires_in === null) {
            $invalid_properties[] = "'expires_in' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function modelName() {
        return self::$_name;
    }

    /**
     * Array of property to mappings.
     *
     * @return array[]
     */
    public function modelAttributes() {
        
        return self::$_attributes;
    }

    /**
     * Validate all the properties in the model
     *
     * Return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function isValid()
    {
        if ($this->access_token === null) {
            return false;
        }
        if ($this->refresh_token === null) {
            return false;
        }
        if ($this->token_type === null) {
            return false;
        }
        if ($this->expires_in === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets access_token.
     *
     * @return string
     */
    public function getAccessToken()
    {
        return $this->access_token;
    }

    /**
     * Sets access_token.
     *
     * @param string $access_token  Token de acesso.
     *
     * @return $this
     */
    public function setAccessToken($access_token)
    {
        $this->access_token = $access_token;

        return $this;
    }

    /**
     * Gets refresh_token.
     *
     * @return string
     */
    public function getRefreshToken()
    {
        return $this->refresh_token;
    }

    /**
     * Sets refresh_token.
     *
     * @param string $refresh_token  Token para renovação.
     *
     * @return $this
     */
    public function setRefreshToken($refresh_token)
    {
        $this->refresh_token = $refresh_token;

        return $this;
    }

    /**
     * Gets token_type.
     *
     * @return string
     */
    public function getTokenType()
    {
        return $this->token_type;
    }

    /**
     * Sets token_type.
     *
     * @param string $token_type  Tipo do token.
     *
     * @return $this
     */
    public function setTokenType($token_type)
    {
        $this->token_type = $token_type;

        return $this;
    }

    /**
     * Gets expires_in.
     *
     * @return int
     */
    public function getExpiresIn()
    {
        return $this->expires_in;
    }

    /**
     * Sets expires_in.
     *
     * @param int $expires_in  Valor em segundos do vencimento do token.
     *
     * @return $this
     */
    public function setExpiresIn($expires_in)
    {
        $this->expires_in = $expires_in;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->$offset) ? $this->$offset : null;
    }

    /**
     * Sets value based on offset.
     * @param  string  $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        $this->$offset = null;
    }
}


