<?php
/**
 * Purchase
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Server\Model
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketplace
 *
 * API Cloud Loyalty LTM - Webpremios
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Server\Model;

use \ArrayAccess;
use Swagger\Server\Model\Catalog;
use Swagger\Server\Model\Campaign;
use Swagger\Server\Model\PurchasePayment;
use Swagger\Server\Model\Orders;
use Swagger\Server\Model\PurchaseCustomer;

/**
 * Class representing the Purchase model.
 *
 * 
 *
 * @package Swagger\Server\Model
 * @author  Swagger Codegen team
 */
class Purchase implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $_name = 'purchase';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var array[]
      */
    protected static $_attributes = [
        'id' => ['id', 'string', null, 'setId', 'getId'],
        'date' => ['date', 'string', null, 'setDate', 'getDate'],
        'value_points' => ['valuePoints', 'float', 'decimal', 'setValuePoints', 'getValuePoints'],
        'shipping_value_points' => ['shippingValuePoints', 'float', 'decimal', 'setShippingValuePoints', 'getShippingValuePoints'],
        'channel_type' => ['channelType', 'string', null, 'setChannelType', 'getChannelType'],
        'orders' => ['orders', 'Swagger\Server\Model\Orders[]', null, 'setOrders', 'getOrders'],
        'payments' => ['payments', 'Swagger\Server\Model\PurchasePayment[]', null, 'setPayments', 'getPayments'],
        'customer' => ['customer', 'Swagger\Server\Model\PurchaseCustomer', null, 'setCustomer', 'getCustomer'],
        'campaign' => ['campaign', 'Swagger\Server\Model\Campaign', null, 'setCampaign', 'getCampaign'],
        'catalog' => ['catalog', 'Swagger\Server\Model\Catalog', null, 'setCatalog', 'getCatalog'],
    ];
    

    /**
     * Allowed values of channel_type
     */
    const CHANNEL_TYPE_ONLINE = 'ONLINE';
    const CHANNEL_TYPE_POS = 'POS';
    const CHANNEL_TYPE_CALLCENTER = 'CALLCENTER';
    const CHANNEL_TYPE_STOREAUTHORIZE = 'STOREAUTHORIZE';
    const CHANNEL_TYPE_STOREONLINE = 'STOREONLINE';
    const CHANNEL_TYPE_MOBILE = 'MOBILE';
    const CHANNEL_TYPE_STOREOWN = 'STOREOWN';
    const CHANNEL_TYPE_RESALE = 'RESALE';
    const CHANNEL_TYPE_SELFSERVICE = 'SELFSERVICE';
    const CHANNEL_TYPE_SMSINTERACTIVE = 'SMSINTERACTIVE';
    const CHANNEL_TYPE_TELESALES = 'TELESALES';
    const CHANNEL_TYPE_URA = 'URA';
    const CHANNEL_TYPE_STOREBENEFIT = 'STOREBENEFIT';
    const CHANNEL_TYPE_NETBANKING = 'NETBANKING';
    const CHANNEL_TYPE_OFFLINE = 'OFFLINE';

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getChannelTypeAllowableValues()
    {
        return [
            self::CHANNEL_TYPE_ONLINE,
            self::CHANNEL_TYPE_POS,
            self::CHANNEL_TYPE_CALLCENTER,
            self::CHANNEL_TYPE_STOREAUTHORIZE,
            self::CHANNEL_TYPE_STOREONLINE,
            self::CHANNEL_TYPE_MOBILE,
            self::CHANNEL_TYPE_STOREOWN,
            self::CHANNEL_TYPE_RESALE,
            self::CHANNEL_TYPE_SELFSERVICE,
            self::CHANNEL_TYPE_SMSINTERACTIVE,
            self::CHANNEL_TYPE_TELESALES,
            self::CHANNEL_TYPE_URA,
            self::CHANNEL_TYPE_STOREBENEFIT,
            self::CHANNEL_TYPE_NETBANKING,
            self::CHANNEL_TYPE_OFFLINE,
        ];
    }
    
    /**
     * Identificador da compra
     *
     * @var string|null
     */
    protected $id;

    /**
     * Data da compra
     *
     * @var string|null
     */
    protected $date;

    /**
     * Valor total da compra, em pontos
     *
     * @var float|null
     */
    protected $value_points;

    /**
     * Valor total do frete da compra, em pontos
     *
     * @var float|null
     */
    protected $shipping_value_points;

    /**
     * Canal que o pedido foi realizado
     *
     * @var string|null
     */
    protected $channel_type;

    /**     * @var Orders[]|null
     */
    protected $orders;

    /**     * @var PurchasePayment[]|null
     */
    protected $payments;

    /**     * @var PurchaseCustomer|null
     */
    protected $customer;

    /**     * @var Campaign|null
     */
    protected $campaign;

    /**     * @var Catalog|null
     */
    protected $catalog;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->id = isset($data['id']) ? $data['id'] : null;
        $this->date = isset($data['date']) ? $data['date'] : null;
        $this->value_points = isset($data['value_points']) ? $data['value_points'] : null;
        $this->shipping_value_points = isset($data['shipping_value_points']) ? $data['shipping_value_points'] : null;
        $this->channel_type = isset($data['channel_type']) ? $data['channel_type'] : null;
        $this->orders = isset($data['orders']) ? $data['orders'] : null;
        $this->payments = isset($data['payments']) ? $data['payments'] : null;
        $this->customer = isset($data['customer']) ? $data['customer'] : null;
        $this->campaign = isset($data['campaign']) ? $data['campaign'] : null;
        $this->catalog = isset($data['catalog']) ? $data['catalog'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowedValues = $this->getChannelTypeAllowableValues();
        if (!in_array($this->channel_type, $allowedValues, true)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'channel_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalid_properties;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function modelName() {
        return self::$_name;
    }

    /**
     * Array of property to mappings.
     *
     * @return array[]
     */
    public function modelAttributes() {
        
        return self::$_attributes;
    }

    /**
     * Validate all the properties in the model
     *
     * Return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function isValid()
    {
        $allowedValues = $this->getChannelTypeAllowableValues();
        if (!in_array($this->channel_type, $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id.
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Sets id.
     *
     * @param string|null $id  Identificador da compra
     *
     * @return $this
     */
    public function setId($id = null)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Gets date.
     *
     * @return string|null
     */
    public function getDate()
    {
        return $this->date;
    }

    /**
     * Sets date.
     *
     * @param string|null $date  Data da compra
     *
     * @return $this
     */
    public function setDate($date = null)
    {
        $this->date = $date;

        return $this;
    }

    /**
     * Gets value_points.
     *
     * @return float|null
     */
    public function getValuePoints()
    {
        return $this->value_points;
    }

    /**
     * Sets value_points.
     *
     * @param float|null $value_points  Valor total da compra, em pontos
     *
     * @return $this
     */
    public function setValuePoints($value_points = null)
    {
        $this->value_points = $value_points;

        return $this;
    }

    /**
     * Gets shipping_value_points.
     *
     * @return float|null
     */
    public function getShippingValuePoints()
    {
        return $this->shipping_value_points;
    }

    /**
     * Sets shipping_value_points.
     *
     * @param float|null $shipping_value_points  Valor total do frete da compra, em pontos
     *
     * @return $this
     */
    public function setShippingValuePoints($shipping_value_points = null)
    {
        $this->shipping_value_points = $shipping_value_points;

        return $this;
    }

    /**
     * Gets channel_type.
     *
     * @return string|null
     */
    public function getChannelType()
    {
        return $this->channel_type;
    }

    /**
     * Sets channel_type.
     *
     * @param string|null $channel_type  Canal que o pedido foi realizado
     *
     * @return $this
     */
    public function setChannelType($channel_type = null)
    {
        $allowedValues = $this->getChannelTypeAllowableValues();
        if ($channel_type !== null && !in_array($channel_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'channel_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->channel_type = $channel_type;

        return $this;
    }

    /**
     * Gets orders.
     *
     * @return Orders[]|null
     */
    public function getOrders()
    {
        return $this->orders;
    }

    /**
     * Sets orders.
     *
     * @param Orders[]|null $orders
     *
     * @return $this
     */
    public function setOrders(array $orders = null)
    {
        $this->orders = $orders;

        return $this;
    }

    /**
     * Gets payments.
     *
     * @return PurchasePayment[]|null
     */
    public function getPayments()
    {
        return $this->payments;
    }

    /**
     * Sets payments.
     *
     * @param PurchasePayment[]|null $payments
     *
     * @return $this
     */
    public function setPayments(array $payments = null)
    {
        $this->payments = $payments;

        return $this;
    }

    /**
     * Gets customer.
     *
     * @return PurchaseCustomer|null
     */
    public function getCustomer()
    {
        return $this->customer;
    }

    /**
     * Sets customer.
     *
     * @param PurchaseCustomer|null $customer
     *
     * @return $this
     */
    public function setCustomer(PurchaseCustomer $customer = null)
    {
        $this->customer = $customer;

        return $this;
    }

    /**
     * Gets campaign.
     *
     * @return Campaign|null
     */
    public function getCampaign()
    {
        return $this->campaign;
    }

    /**
     * Sets campaign.
     *
     * @param Campaign|null $campaign
     *
     * @return $this
     */
    public function setCampaign(Campaign $campaign = null)
    {
        $this->campaign = $campaign;

        return $this;
    }

    /**
     * Gets catalog.
     *
     * @return Catalog|null
     */
    public function getCatalog()
    {
        return $this->catalog;
    }

    /**
     * Sets catalog.
     *
     * @param Catalog|null $catalog
     *
     * @return $this
     */
    public function setCatalog(Catalog $catalog = null)
    {
        $this->catalog = $catalog;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->$offset) ? $this->$offset : null;
    }

    /**
     * Sets value based on offset.
     * @param  string  $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        $this->$offset = null;
    }
}


