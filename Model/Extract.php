<?php
/**
 * Extract
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Server\Model
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketplace
 *
 * API Cloud Loyalty LTM - Webpremios
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Server\Model;

use \ArrayAccess;

/**
 * Class representing the Extract model.
 *
 * 
 *
 * @package Swagger\Server\Model
 * @author  Swagger Codegen team
 */
class Extract implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $_name = 'extract';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var array[]
      */
    protected static $_attributes = [
        'authorization_code' => ['authorizationCode', 'string', null, 'setAuthorizationCode', 'getAuthorizationCode'],
        'date' => ['date', 'string', null, 'setDate', 'getDate'],
        'description' => ['description', 'string', null, 'setDescription', 'getDescription'],
        'value_points' => ['valuePoints', 'float', 'decimal', 'setValuePoints', 'getValuePoints'],
        'type' => ['type', 'string', null, 'setType', 'getType'],
    ];
    

    /**
     * Allowed values of type
     */
    const TYPE_DEBIT = 'DEBIT';
    const TYPE_CREDIT = 'CREDIT';

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_DEBIT,
            self::TYPE_CREDIT,
        ];
    }
    
    /**
     * Código de autorização
     *
     * @var string|null
     */
    protected $authorization_code;

    /**
     * Data/Hora da transação
     *
     * @var string|null
     */
    protected $date;

    /**
     * Descrição da transação
     *
     * @var string|null
     */
    protected $description;

    /**
     * Valor em pontos
     *
     * @var float|null
     */
    protected $value_points;

    /**
     * Total de débitos em pontos
     *
     * @var string|null
     */
    protected $type;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->authorization_code = isset($data['authorization_code']) ? $data['authorization_code'] : null;
        $this->date = isset($data['date']) ? $data['date'] : null;
        $this->description = isset($data['description']) ? $data['description'] : null;
        $this->value_points = isset($data['value_points']) ? $data['value_points'] : null;
        $this->type = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($this->type, $allowedValues, true)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalid_properties;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function modelName() {
        return self::$_name;
    }

    /**
     * Array of property to mappings.
     *
     * @return array[]
     */
    public function modelAttributes() {
        
        return self::$_attributes;
    }

    /**
     * Validate all the properties in the model
     *
     * Return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function isValid()
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($this->type, $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets authorization_code.
     *
     * @return string|null
     */
    public function getAuthorizationCode()
    {
        return $this->authorization_code;
    }

    /**
     * Sets authorization_code.
     *
     * @param string|null $authorization_code  Código de autorização
     *
     * @return $this
     */
    public function setAuthorizationCode($authorization_code = null)
    {
        $this->authorization_code = $authorization_code;

        return $this;
    }

    /**
     * Gets date.
     *
     * @return string|null
     */
    public function getDate()
    {
        return $this->date;
    }

    /**
     * Sets date.
     *
     * @param string|null $date  Data/Hora da transação
     *
     * @return $this
     */
    public function setDate($date = null)
    {
        $this->date = $date;

        return $this;
    }

    /**
     * Gets description.
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Sets description.
     *
     * @param string|null $description  Descrição da transação
     *
     * @return $this
     */
    public function setDescription($description = null)
    {
        $this->description = $description;

        return $this;
    }

    /**
     * Gets value_points.
     *
     * @return float|null
     */
    public function getValuePoints()
    {
        return $this->value_points;
    }

    /**
     * Sets value_points.
     *
     * @param float|null $value_points  Valor em pontos
     *
     * @return $this
     */
    public function setValuePoints($value_points = null)
    {
        $this->value_points = $value_points;

        return $this;
    }

    /**
     * Gets type.
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Sets type.
     *
     * @param string|null $type  Total de débitos em pontos
     *
     * @return $this
     */
    public function setType($type = null)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if ($type !== null && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->type = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->$offset) ? $this->$offset : null;
    }

    /**
     * Sets value based on offset.
     * @param  string  $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        $this->$offset = null;
    }
}


