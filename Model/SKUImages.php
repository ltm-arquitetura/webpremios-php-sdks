<?php
/**
 * SKUImages
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Server\Model
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketplace
 *
 * API Cloud Loyalty LTM - Webpremios
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Server\Model;

use \ArrayAccess;

/**
 * Class representing the SKUImages model.
 *
 * @package Swagger\Server\Model
 * @author  Swagger Codegen team
 */
class SKUImages implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $_name = 'SKUImages';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var array[]
      */
    protected static $_attributes = [
        'small_image' => ['smallImage', 'string', null, 'setSmallImage', 'getSmallImage'],
        'medium_image' => ['mediumImage', 'string', null, 'setMediumImage', 'getMediumImage'],
        'large_image' => ['largeImage', 'string', null, 'setLargeImage', 'getLargeImage'],
        'order' => ['order', 'float', null, 'setOrder', 'getOrder'],
    ];
    

    
    /**
     * Imagem pequena
     *
     * @var string|null
     */
    protected $small_image;

    /**
     * Imagem média
     *
     * @var string|null
     */
    protected $medium_image;

    /**
     * Imagem grande
     *
     * @var string|null
     */
    protected $large_image;

    /**
     * Ordem de exibição
     *
     * @var float|null
     */
    protected $order;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->small_image = isset($data['small_image']) ? $data['small_image'] : null;
        $this->medium_image = isset($data['medium_image']) ? $data['medium_image'] : null;
        $this->large_image = isset($data['large_image']) ? $data['large_image'] : null;
        $this->order = isset($data['order']) ? $data['order'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function modelName() {
        return self::$_name;
    }

    /**
     * Array of property to mappings.
     *
     * @return array[]
     */
    public function modelAttributes() {
        
        return self::$_attributes;
    }

    /**
     * Validate all the properties in the model
     *
     * Return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function isValid()
    {
        return true;
    }


    /**
     * Gets small_image.
     *
     * @return string|null
     */
    public function getSmallImage()
    {
        return $this->small_image;
    }

    /**
     * Sets small_image.
     *
     * @param string|null $small_image  Imagem pequena
     *
     * @return $this
     */
    public function setSmallImage($small_image = null)
    {
        $this->small_image = $small_image;

        return $this;
    }

    /**
     * Gets medium_image.
     *
     * @return string|null
     */
    public function getMediumImage()
    {
        return $this->medium_image;
    }

    /**
     * Sets medium_image.
     *
     * @param string|null $medium_image  Imagem média
     *
     * @return $this
     */
    public function setMediumImage($medium_image = null)
    {
        $this->medium_image = $medium_image;

        return $this;
    }

    /**
     * Gets large_image.
     *
     * @return string|null
     */
    public function getLargeImage()
    {
        return $this->large_image;
    }

    /**
     * Sets large_image.
     *
     * @param string|null $large_image  Imagem grande
     *
     * @return $this
     */
    public function setLargeImage($large_image = null)
    {
        $this->large_image = $large_image;

        return $this;
    }

    /**
     * Gets order.
     *
     * @return float|null
     */
    public function getOrder()
    {
        return $this->order;
    }

    /**
     * Sets order.
     *
     * @param float|null $order  Ordem de exibição
     *
     * @return $this
     */
    public function setOrder($order = null)
    {
        $this->order = $order;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->$offset) ? $this->$offset : null;
    }

    /**
     * Sets value based on offset.
     * @param  string  $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        $this->$offset = null;
    }
}


