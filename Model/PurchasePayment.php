<?php
/**
 * PurchasePayment
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Server\Model
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketplace
 *
 * API Cloud Loyalty LTM - Webpremios
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Server\Model;

use \ArrayAccess;
use Swagger\Server\Model\PaymentBrand;

/**
 * Class representing the PurchasePayment model.
 *
 * 
 *
 * @package Swagger\Server\Model
 * @author  Swagger Codegen team
 */
class PurchasePayment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $_name = 'purchasePayment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var array[]
      */
    protected static $_attributes = [
        'transaction_id' => ['transactionId', 'string', null, 'setTransactionId', 'getTransactionId'],
        'date' => ['date', 'string', null, 'setDate', 'getDate'],
        'value_points' => ['valuePoints', 'float', 'decimal', 'setValuePoints', 'getValuePoints'],
        'type' => ['type', 'string', null, 'setType', 'getType'],
        'brand' => ['brand', 'Swagger\Server\Model\PaymentBrand', null, 'setBrand', 'getBrand'],
        'installments' => ['installments', 'float', 'integer', 'setInstallments', 'getInstallments'],
        'installments_value' => ['installmentsValue', 'float', 'decimal', 'setInstallmentsValue', 'getInstallmentsValue'],
    ];
    

    /**
     * Allowed values of type
     */
    const TYPE_POINTS = 'POINTS';

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_POINTS,
        ];
    }
    
    /**
     * Identificador da transação
     *
     * @var string|null
     */
    protected $transaction_id;

    /**
     * Data do pagamento
     *
     * @var string|null
     */
    protected $date;

    /**
     * Valor do pagamentos, em pontos
     *
     * @var float|null
     */
    protected $value_points;

    /**
     * Tipo do pagamento
     *
     * @var string|null
     */
    protected $type;

    /**     * @var PaymentBrand|null
     */
    protected $brand;

    /**
     * Número de parcelas
     *
     * @var float|null
     */
    protected $installments;

    /**
     * Valor por parcela, em pontos
     *
     * @var float|null
     */
    protected $installments_value;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->transaction_id = isset($data['transaction_id']) ? $data['transaction_id'] : null;
        $this->date = isset($data['date']) ? $data['date'] : null;
        $this->value_points = isset($data['value_points']) ? $data['value_points'] : null;
        $this->type = isset($data['type']) ? $data['type'] : null;
        $this->brand = isset($data['brand']) ? $data['brand'] : null;
        $this->installments = isset($data['installments']) ? $data['installments'] : null;
        $this->installments_value = isset($data['installments_value']) ? $data['installments_value'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($this->type, $allowedValues, true)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalid_properties;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function modelName() {
        return self::$_name;
    }

    /**
     * Array of property to mappings.
     *
     * @return array[]
     */
    public function modelAttributes() {
        
        return self::$_attributes;
    }

    /**
     * Validate all the properties in the model
     *
     * Return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function isValid()
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($this->type, $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets transaction_id.
     *
     * @return string|null
     */
    public function getTransactionId()
    {
        return $this->transaction_id;
    }

    /**
     * Sets transaction_id.
     *
     * @param string|null $transaction_id  Identificador da transação
     *
     * @return $this
     */
    public function setTransactionId($transaction_id = null)
    {
        $this->transaction_id = $transaction_id;

        return $this;
    }

    /**
     * Gets date.
     *
     * @return string|null
     */
    public function getDate()
    {
        return $this->date;
    }

    /**
     * Sets date.
     *
     * @param string|null $date  Data do pagamento
     *
     * @return $this
     */
    public function setDate($date = null)
    {
        $this->date = $date;

        return $this;
    }

    /**
     * Gets value_points.
     *
     * @return float|null
     */
    public function getValuePoints()
    {
        return $this->value_points;
    }

    /**
     * Sets value_points.
     *
     * @param float|null $value_points  Valor do pagamentos, em pontos
     *
     * @return $this
     */
    public function setValuePoints($value_points = null)
    {
        $this->value_points = $value_points;

        return $this;
    }

    /**
     * Gets type.
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Sets type.
     *
     * @param string|null $type  Tipo do pagamento
     *
     * @return $this
     */
    public function setType($type = null)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if ($type !== null && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->type = $type;

        return $this;
    }

    /**
     * Gets brand.
     *
     * @return PaymentBrand|null
     */
    public function getBrand()
    {
        return $this->brand;
    }

    /**
     * Sets brand.
     *
     * @param PaymentBrand|null $brand
     *
     * @return $this
     */
    public function setBrand(PaymentBrand $brand = null)
    {
        $this->brand = $brand;

        return $this;
    }

    /**
     * Gets installments.
     *
     * @return float|null
     */
    public function getInstallments()
    {
        return $this->installments;
    }

    /**
     * Sets installments.
     *
     * @param float|null $installments  Número de parcelas
     *
     * @return $this
     */
    public function setInstallments($installments = null)
    {
        $this->installments = $installments;

        return $this;
    }

    /**
     * Gets installments_value.
     *
     * @return float|null
     */
    public function getInstallmentsValue()
    {
        return $this->installments_value;
    }

    /**
     * Sets installments_value.
     *
     * @param float|null $installments_value  Valor por parcela, em pontos
     *
     * @return $this
     */
    public function setInstallmentsValue($installments_value = null)
    {
        $this->installments_value = $installments_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->$offset) ? $this->$offset : null;
    }

    /**
     * Sets value based on offset.
     * @param  string  $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        $this->$offset = null;
    }
}


