<?php

/**
 * CarrinhoController
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Server\Controller
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketplace
 *
 * API Cloud Loyalty LTM - Webpremios
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Server\Controller;

use \Exception;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Swagger\Server\Api\CarrinhoApiInterface;
use Swagger\Server\Model\BusinessErrorMessage;
use Swagger\Server\Model\RequestUpdCartItem;
use Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Swagger\Server\Model\CartShipping;
use Swagger\Server\Model\Cart;
use Symfony\Component\HttpKernel\Exception\UnprocessableEntityHttpException;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
use Swagger\Server\Model\RequestAddCartItem;
use Swagger\Server\Model\ShippingRates;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;

/**
 * CarrinhoController Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Server\Controller
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CarrinhoController extends Controller
{

    /**
     * Operation cartsMeGet
     *
     * Obtém um carrinho
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function cartsMeGetAction(Request $request)
    {
        // Authentication 'access_token' required
        // Set key with prefix in header
        $securityaccess_token = $request->headers->get('access_token');
        // Authentication 'client_id' required
        // Set key with prefix in header
        $securityclient_id = $request->headers->get('client_id');
        // Handle query params
        $type = $this->fromQuery($request->query->get('type'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'type' is set
        if ($type === null) {
            return $this->createBadRequestResponse('Missing the required parameter $type when calling cartsMeGet');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'access_token'
            $handler->setaccess_token($securityaccess_token);
            // Set authentication method 'client_id'
            $handler->setclient_id($securityclient_id);
            // Expecting a return value (exception otherwise)
            $result = $handler->cartsMeGet($type);

            // Handle 200 response: Operação realizada com sucesso.
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Operação realizada com sucesso.',
            ]);
            // Handle 500 response: Erro Interno.
            $content = $this->serialize($result, 'json');
            return new Response($content, 500, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Erro Interno.',
            ]);
        } catch (BadRequestHttpException $exception) {
            // Requisição mal formada.
            return $this->createErrorResponse($exception);
        } catch (UnauthorizedHttpException $exception) {
            // Requisição requer autenticação.
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // O acesso ao recurso foi negado.
            return $this->createErrorResponse($exception);
        } catch (NotFoundHttpException $exception) {
            // Recurso não encontrado.
            return $this->createErrorResponse($exception);
        } catch (UnprocessableEntityHttpException $exception) {
            // Requisição não processável.
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation cartsMeItemsPost
     *
     * Adicionar item no carrinho
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function cartsMeItemsPostAction(Request $request)
    {
        // Authentication 'access_token' required
        // Set key with prefix in header
        $securityaccess_token = $request->headers->get('access_token');
        // Authentication 'client_id' required
        // Set key with prefix in header
        $securityclient_id = $request->headers->get('client_id');
        // Handle query params
        $type = $this->fromQuery($request->query->get('type'), 'string');
        // Handle query params
        $email = $this->fromQuery($request->query->get('email'), 'string');
        // Handle body params
        $item = $this->deserialize($request->getContent(), 'Swagger\Server\Model\RequestAddCartItem', 'json');

        // Parse incoming parameters
        // Verify the required parameter 'type' is set
        if ($type === null) {
            return $this->createBadRequestResponse('Missing the required parameter $type when calling cartsMeItemsPost');
        }
        // Verify the required parameter 'item' is set
        if ($item === null) {
            return $this->createBadRequestResponse('Missing the required parameter $item when calling cartsMeItemsPost');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'access_token'
            $handler->setaccess_token($securityaccess_token);
            // Set authentication method 'client_id'
            $handler->setclient_id($securityclient_id);
            // No return type expected; return empty response
            $handler->cartsMeItemsPost($type, $item, $email);
            return new Response('', 204);
        } catch (BadRequestHttpException $exception) {
            // Requisição mal formada.
            return $this->createErrorResponse($exception);
        } catch (UnauthorizedHttpException $exception) {
            // Requisição requer autenticação.
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // O acesso ao recurso foi negado.
            return $this->createErrorResponse($exception);
        } catch (NotFoundHttpException $exception) {
            // Recurso não encontrado.
            return $this->createErrorResponse($exception);
        } catch (UnprocessableEntityHttpException $exception) {
            // Requisição não processável.
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation cartsMeItemsSkuIdDelete
     *
     * Remove item do carrinho
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function cartsMeItemsSkuIdDeleteAction(Request $request)
    {
        // Authentication 'access_token' required
        // Set key with prefix in header
        $securityaccess_token = $request->headers->get('access_token');
        // Authentication 'client_id' required
        // Set key with prefix in header
        $securityclient_id = $request->headers->get('client_id');
        // Handle query params
        $type = $this->fromQuery($request->query->get('type'), 'string');
        // Handle path params
        $sku_id = $this->fromPath($request->attributes->get('sku_id'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'sku_id' is set
        if ($sku_id === null) {
            return $this->createBadRequestResponse('Missing the required parameter $sku_id when calling cartsMeItemsSkuIdDelete');
        }
        // Verify the required parameter 'type' is set
        if ($type === null) {
            return $this->createBadRequestResponse('Missing the required parameter $type when calling cartsMeItemsSkuIdDelete');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'access_token'
            $handler->setaccess_token($securityaccess_token);
            // Set authentication method 'client_id'
            $handler->setclient_id($securityclient_id);
            // No return type expected; return empty response
            $handler->cartsMeItemsSkuIdDelete($sku_id, $type);
            return new Response('', 204);
        } catch (BadRequestHttpException $exception) {
            // Requisição mal formada.
            return $this->createErrorResponse($exception);
        } catch (UnauthorizedHttpException $exception) {
            // Requisição requer autenticação.
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // O acesso ao recurso foi negado.
            return $this->createErrorResponse($exception);
        } catch (NotFoundHttpException $exception) {
            // Recurso não encontrado.
            return $this->createErrorResponse($exception);
        } catch (UnprocessableEntityHttpException $exception) {
            // Requisição não processável.
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation cartsMeItemsSkuIdPut
     *
     * Alterar item no carrinho
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function cartsMeItemsSkuIdPutAction(Request $request)
    {
        // Authentication 'access_token' required
        // Set key with prefix in header
        $securityaccess_token = $request->headers->get('access_token');
        // Authentication 'client_id' required
        // Set key with prefix in header
        $securityclient_id = $request->headers->get('client_id');
        // Handle query params
        $type = $this->fromQuery($request->query->get('type'), 'string');
        // Handle query params
        $vendor_id = $this->fromQuery($request->query->get('vendor_id'), 'string');
        // Handle path params
        $sku_id = $this->fromPath($request->attributes->get('sku_id'), 'int');
        // Handle body params
        $item = $this->deserialize($request->getContent(), 'Swagger\Server\Model\RequestUpdCartItem', 'json');

        // Parse incoming parameters
        // Verify the required parameter 'sku_id' is set
        if ($sku_id === null) {
            return $this->createBadRequestResponse('Missing the required parameter $sku_id when calling cartsMeItemsSkuIdPut');
        }
        // Verify the required parameter 'type' is set
        if ($type === null) {
            return $this->createBadRequestResponse('Missing the required parameter $type when calling cartsMeItemsSkuIdPut');
        }
        // Verify the required parameter 'vendor_id' is set
        if ($vendor_id === null) {
            return $this->createBadRequestResponse('Missing the required parameter $vendor_id when calling cartsMeItemsSkuIdPut');
        }
        // Verify the required parameter 'item' is set
        if ($item === null) {
            return $this->createBadRequestResponse('Missing the required parameter $item when calling cartsMeItemsSkuIdPut');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'access_token'
            $handler->setaccess_token($securityaccess_token);
            // Set authentication method 'client_id'
            $handler->setclient_id($securityclient_id);
            // No return type expected; return empty response
            $handler->cartsMeItemsSkuIdPut($sku_id, $type, $vendor_id, $item);
            return new Response('', 204);
        } catch (BadRequestHttpException $exception) {
            // Requisição mal formada.
            return $this->createErrorResponse($exception);
        } catch (UnauthorizedHttpException $exception) {
            // Requisição requer autenticação.
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // O acesso ao recurso foi negado.
            return $this->createErrorResponse($exception);
        } catch (NotFoundHttpException $exception) {
            // Recurso não encontrado.
            return $this->createErrorResponse($exception);
        } catch (UnprocessableEntityHttpException $exception) {
            // Requisição não processável.
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation cartsMeShippingPut
     *
     * Adiciona dados de entrega no carrinho
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function cartsMeShippingPutAction(Request $request)
    {
        // Authentication 'access_token' required
        // Set key with prefix in header
        $securityaccess_token = $request->headers->get('access_token');
        // Authentication 'client_id' required
        // Set key with prefix in header
        $securityclient_id = $request->headers->get('client_id');
        // Handle query params
        $type = $this->fromQuery($request->query->get('type'), 'string');
        // Handle body params
        $shipping = $this->deserialize($request->getContent(), 'Swagger\Server\Model\CartShipping', 'json');

        // Parse incoming parameters
        // Verify the required parameter 'type' is set
        if ($type === null) {
            return $this->createBadRequestResponse('Missing the required parameter $type when calling cartsMeShippingPut');
        }
        // Verify the required parameter 'shipping' is set
        if ($shipping === null) {
            return $this->createBadRequestResponse('Missing the required parameter $shipping when calling cartsMeShippingPut');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'access_token'
            $handler->setaccess_token($securityaccess_token);
            // Set authentication method 'client_id'
            $handler->setclient_id($securityclient_id);
            // No return type expected; return empty response
            $handler->cartsMeShippingPut($type, $shipping);
            return new Response('', 204);
        } catch (BadRequestHttpException $exception) {
            // Requisição mal formada.
            return $this->createErrorResponse($exception);
        } catch (UnauthorizedHttpException $exception) {
            // Requisição requer autenticação.
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // O acesso ao recurso foi negado.
            return $this->createErrorResponse($exception);
        } catch (NotFoundHttpException $exception) {
            // Recurso não encontrado.
            return $this->createErrorResponse($exception);
        } catch (UnprocessableEntityHttpException $exception) {
            // Requisição não processável.
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation cartsMeShippingRatesGet
     *
     * Calcula o frete do carrinho para um CEP
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function cartsMeShippingRatesGetAction(Request $request)
    {
        // Authentication 'access_token' required
        // Set key with prefix in header
        $securityaccess_token = $request->headers->get('access_token');
        // Authentication 'client_id' required
        // Set key with prefix in header
        $securityclient_id = $request->headers->get('client_id');
        // Handle query params
        $zip_code = $this->fromQuery($request->query->get('zip_code'), 'string');
        // Handle query params
        $type = $this->fromQuery($request->query->get('type'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'zip_code' is set
        if ($zip_code === null) {
            return $this->createBadRequestResponse('Missing the required parameter $zip_code when calling cartsMeShippingRatesGet');
        }
        // Verify the required parameter 'type' is set
        if ($type === null) {
            return $this->createBadRequestResponse('Missing the required parameter $type when calling cartsMeShippingRatesGet');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'access_token'
            $handler->setaccess_token($securityaccess_token);
            // Set authentication method 'client_id'
            $handler->setclient_id($securityclient_id);
            // Expecting a return value (exception otherwise)
            $result = $handler->cartsMeShippingRatesGet($zip_code, $type);

            // Handle 200 response: Frete calculado com sucesso
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Frete calculado com sucesso',
            ]);
        } catch (UnprocessableEntityHttpException $exception) {
            // Carrinho inválido para calculo de frete
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Returns the handler for this API controller.
     * @return CarrinhoApiInterface
     */
    public function getApiHandler()
    {
        return $this->get('swagger_server.api.api_server')->getApiHandler('carrinho');
    }
}
